from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from bot import config
from bot.database.mysql import mysql
from bot.database.sqlite import sqlite
from bot.keyboards import inline, reply
from bot import states as st
import json
from mysql.connector.errors import InternalError


async def bot_start(msg: types.Message):
    if msg.chat.type == 'private':
        user_name = msg.from_user.first_name
        user_id = msg.from_user.id
        user = await sqlite.user_status(user_id)
        if not user:
            await msg.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!',
                             reply_markup=inline.login())
        else:
            try:
                bot_db = await sqlite.get_id(user_id)
                display_name = await sqlite.get_display_name(user_id)
                result = await mysql.get_user_profile(bot_db[0])
                date = result[1].strftime("%d.%m.%Y")
                count = await mysql.count_scoring(bot_db[0])
                await msg.answer(f"\n<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>"
                                 f'\n‚úÖ<em>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{display_name}!</b></em>'
                                 f"\nüåê<em>–í–∞—à —Ç–∞—Ä–∏—Ñ:</em><b> {result[0]} </b>"
                                 f"\nüìÖ<em>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</em> <b>{date}</b>"
                                 f"\nüìù<em>–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫:</em><b> {result[2] - count}</b>\n\n",
                                 reply_markup=inline.logout())
                await msg.answer(f"üìë –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –ò–ù–ù –∏–ª–∏ –û–ì–†–ù:")
            except TypeError:
                display_name = await sqlite.get_display_name(user_id)
                await msg.answer(f"\n<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>"
                                 f'\n‚úÖ<em>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{display_name}!</b></em>\n\n'
                                 f'–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!', reply_markup=inline.logout())
            except InternalError:
                display_name = await sqlite.get_display_name(user_id)
                await msg.answer(f"\n<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>"
                                 f'\n‚úÖ<em>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{display_name}!</b></em>\n\n'
                                 f'–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!', reply_markup=inline.logout())


async def history(msg: types.Message):
    if msg.chat.type == 'private':
        user_id = msg.from_user.id
        user = await sqlite.user_status(user_id)
        try:
            if user:
                await msg.delete()
                await msg.answer('<b>–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫, –æ–∂–∏–¥–∞–π—Ç–µ</b>')
                u_id = await sqlite.get_id(user_id)
                logs = await mysql.check_log(u_id[0])
                counter = 0
                for log in logs:
                    if counter >= 5:
                        break
                    date = log[2]
                    ogrn = log[3]
                    org_json = json.loads(log[4])
                    try:
                        org_name = org_json["–§–ù–°"]["items"][0]["–Æ–õ"]["–ù–∞–∏–º–°–æ–∫—Ä–Æ–õ"]
                    except KeyError:
                        org_name = org_json["–§–ù–°"]["items"][0]["–ò–ü"]["–§–ò–û–ü–æ–ª–Ω"]
                    counter += 1
                    await msg.answer(text=f'<em>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</em>: <b>{date.strftime("%d.%m.%Y")}</b>\n'
                                          f'<em>–ò–ù–ù/–û–ì–†–ù:</em><b><a href="'
                                          f'https://svoya-proverka.ru/scoring/?ogrn={ogrn}"> {ogrn}</a></b>\n'
                                          f'<em>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</em> <b>{org_name}</b>')
                await msg.answer(
                    '<b>–ü–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å '
                    '<a href="https://svoya-proverka.ru/cabinet/">–Ω–∞ —Å–∞–π—Ç–µ</a> –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</b>')
            else:
                await msg.answer(f'–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å!\n'
                                 f'–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start')
        except InternalError:
            await msg.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!')

        except TypeError:
            await msg.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!')


async def tech_sup(msg: types.Message):
    if msg.chat.type == 'private':
        await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏", reply_markup=reply.cmd_cancel())
        await st.Support.info.set()


async def tech_sup_text(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data = {"text": msg.text, "user_name": msg.from_user.username, "user_id": msg.from_user.id}
    await msg.reply("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                    reply_markup=reply.remove)
    text = data['text']
    user_name = data['user_name']
    user_id = data['user_id']
    x = await sqlite.get_id(user_id)
    if x:
        email_full_name = await mysql.get_user_email_full_name(x[0])
        try:
            email = email_full_name[0]
        except TypeError:
            email = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        try:
            full_name = email_full_name[1]
        except TypeError:
            full_name = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        try:
            phone = await mysql.get_user_phone(x[0])
            phone = phone[0]
        except TypeError:
            phone = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        try:
            org = await mysql.get_user_org(x[0])
            org = org[0]
        except TypeError:
            org = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'

        await msg.bot.send_message(config.group_id, f"<b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name}</b>\n"
                                                    f"–ò–ú–Ø: {full_name}\n"
                                                    f"EMAIL: {email}\n"
                                                    f"–¢–ï–õ–ï–§–û–ù: {phone}\n"
                                                    f"–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø: {org}"

                                                    f"\n\n–í–û–ü–†–û–°: {text}",

                                   reply_markup=inline.sup_answer(user_name))
        await state.finish()

    else:
        await msg.bot.send_message(config.group_id, f"<b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ "
                                                    f"–≤–æ—à–µ–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ)</b>\n"

                                                    f"\n–í–û–ü–†–û–°: {text}",

                                   reply_markup=inline.sup_answer(user_name))


async def cmd_cancel(msg: types.Message, state: FSMContext):
    await msg.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!',
                     reply_markup=reply.remove)
    await state.finish()


async def sup_1(call: types.CallbackQuery):
    await call.message.edit_reply_markup()


def register(dp: Dispatcher):
    dp.register_message_handler(cmd_cancel, text='–û—Ç–º–µ–Ω–∞', state="*")
    dp.register_message_handler(bot_start, commands='start', state='*')
    dp.register_message_handler(history, commands='history')
    dp.register_message_handler(tech_sup, commands='help')
    dp.register_message_handler(tech_sup_text, state=st.Support.info)
    dp.register_callback_query_handler(sup_1, text='sup_1')
