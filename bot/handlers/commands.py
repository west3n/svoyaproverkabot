from aiogram import Dispatcher, types

from bot.database.mysql import mysql
from bot.database.sqlite import sqlite
from bot.keyboards import inline

import json


async def bot_start(msg: types.Message):
    user_name = msg.from_user.first_name
    user_id = msg.from_user.id
    user = await sqlite.user_status(user_id)
    if not user:
        await msg.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!',
                         reply_markup=inline.login())
    else:
        bot_db = await sqlite.get_id(user_id)
        display_name = await sqlite.get_display_name(user_id)
        result = await mysql.get_user_profile(bot_db[0])
        date = result[1].strftime("%d.%m.%Y")
        count = await mysql.count_scoring(bot_db[0])
        await msg.answer(f"\n<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>"
                         f'\n‚úÖ<em>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{display_name}!</b></em>'
                         f"\nüåê<em>–í–∞—à —Ç–∞—Ä–∏—Ñ:</em><b> {result[0]} </b>"
                         f"\nüìÖ<em>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</em> <b>{date}</b>"
                         f"\nüìù<em>–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫:</em><b> {result[2] - count}</b>\n\n",
                         reply_markup=inline.logout())
        await msg.answer(f"üìë –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –û–ì–†–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")


async def history(msg: types.Message):
    user_id = msg.from_user.id
    user = await sqlite.user_status(user_id)
    if user:
        await msg.delete()
        await msg.answer('<b>–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫, –æ–∂–∏–¥–∞–π—Ç–µ</b>')
        u_id = await sqlite.get_id(user_id)
        logs = await mysql.check_log(u_id[0])
        counter = 0
        for log in logs:
            if counter >= 5:
                break
            date = log[2]
            ogrn = log[3]
            org_json = json.loads(log[4])
            org_name = org_json["–§–ù–°"]["items"][0]["–Æ–õ"]["–ù–∞–∏–º–°–æ–∫—Ä–Æ–õ"]
            counter += 1
            await msg.answer(text=f'<em>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</em>: <b>{date.strftime("%d.%m.%Y")}</b>\n'
                                  f'<em>–ò–ù–ù/–û–ì–†–ù:</em><b><a href="'
                                  f'https://svoya-proverka.ru/scoring/?ogrn={ogrn}"> {ogrn}</a></b>\n'
                                  f'<em>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</em> <b>{org_name}</b>')
        await msg.answer(
            '<b>–ü–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <a href="https://svoya-proverka.ru/cabinet/">–Ω–∞ —Å–∞–π—Ç–µ</a> –≤ '
            '–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</b>')
    else:
        await msg.answer(f'–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å!\n'
                         f'–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login')


def register(dp: Dispatcher):
    dp.register_message_handler(bot_start, commands='start', state='*')
    dp.register_message_handler(history, commands='history')
